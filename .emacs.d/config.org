* Config
** General
*** general
#+begin_src elisp
  (setq inhibit-startup-message t)
  (global-hl-line-mode 1)
  (global-display-line-numbers-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p); use y or n for prompts
  (global-subword-mode 1) ; moving cursor throw CamelCase and snake_case with ease

  ;; no gui
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)

  ;; Replace when marked
  (use-package delsel
    :ensure nil
    :hook (after-init . delete-selection-mode))

  (let ((mono-spaced-font "Iosevka Nerd Font Mono")
	(proportionately-spaced-font "Sans"))
    (set-face-attribute 'default nil :family mono-spaced-font :height 120)
    (set-face-attribute 'fixed-pitch nil :family mono-spaced-font :height 1.0)
    (set-face-attribute 'variable-pitch nil :family proportionately-spaced-font :height 1.0))

  ;; disable backups and autosave
  (setq make-backup-files nil)
  (setq auto-save-default nil)

#+end_src

*** duplicate line
#+begin_src elisp
  (defun rc/duplicate-line ()
   "Duplicate current line"
   (interactive)
   (let ((column (- (point) (point-at-bol)))
	 (line (let ((s (thing-at-point 'line t)))
		 (if s (string-remove-suffix "\n" s) ""))))
     (move-end-of-line 1)
     (newline)
     (insert line)
     (move-beginning-of-line 1)
     (forward-char column)))
  (global-set-key (kbd "M-t") 'rc/duplicate-line)
#+end_src

*** split vertical
#+begin_src elisp
  (defun my-split-or-move-to-vertical ()
    "Create a new vertical split and move to it, or move to the existing split."
    (interactive)
    (if (window-parent)
	(other-window 1)
      (split-window-below)
      (other-window 1)))
  (global-set-key (kbd "<f5>") 'my-split-or-move-to-vertical)
#+end_src

*** windows shell
#+begin_src elisp
  (when (eq system-type 'windows-nt)
  (let ((xlist
	 '(
	  "C:/Program Files/PowerShell/7/pwsh.exe"
	  "C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe"
	  ))
	xfound)
    (setq xfound (seq-some (lambda (x) (if (file-exists-p x) x nil)) xlist))
    (when xfound (setq explicit-shell-file-name xfound))))
#+end_src

*** ctrl-w delete word
#+begin_src elisp
  (defun kill-region-or-word ()
    "Call `kill-region' or `backward-kill-word' depending on
  whether or not a region is selected."
    (interactive)
    (if (and transient-mark-mode mark-active)
	(kill-region (point) (mark))
      (backward-kill-word 1)))
  (global-set-key "\C-w" 'kill-region-or-word)
#+end_src

** Plugins
#+begin_src elisp
  (use-package ef-themes
    :if window-system
    :ensure t
    :config
    ;; Enable the theme
    (load-theme 'ef-winter t))

  ;; Remember to do M-x and run `nerd-icons-install-fonts' to get the
  ;; font files.  Then restart Emacs to see the effect.
  (use-package nerd-icons
    :ensure t)

  (use-package nerd-icons-completion
    :ensure t
    :after marginalia
    :config
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

  (use-package nerd-icons-corfu
    :ensure t
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

  (use-package nerd-icons-dired
    :ensure t
    :hook
    (dired-mode . nerd-icons-dired-mode))

  ;;; Configure the minibuffer and completions

  (use-package vertico
    :ensure t
    :hook (after-init . vertico-mode))

  (use-package marginalia
    :ensure t
    :hook (after-init . marginalia-mode))

  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless basic))
    (setq completion-category-defaults nil)
    (setq completion-category-overrides nil))

  (use-package savehist
    :ensure nil ; it is built-in
    :hook (after-init . savehist-mode))

  (use-package corfu
    :ensure t
    :hook (after-init . global-corfu-mode)
    :bind (:map corfu-map ("<tab>" . corfu-complete))
    :config
    (setq tab-always-indent 'complete)
    (setq corfu-preview-current nil)
    (setq corfu-min-width 20)

    (setq corfu-popupinfo-delay '(1.25 . 0.5))
    (corfu-popupinfo-mode 1) ; shows documentation after `corfu-popupinfo-delay'

    ;; Sort by input history (no need to modify `corfu-sort-function').
    (with-eval-after-load 'savehist
      (corfu-history-mode 1)
      (add-to-list 'savehist-additional-variables 'corfu-history)))

  ;;; The file manager (Dired)

  (use-package dired
    :ensure nil
    :commands (dired)
    :hook
    ((dired-mode . dired-hide-details-mode)
     (dired-mode . hl-line-mode))
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-dwim-target t))

  (use-package dired-subtree
    :ensure t
    :after dired
    :bind
    ( :map dired-mode-map
      ("<tab>" . dired-subtree-toggle)
      ("TAB" . dired-subtree-toggle)
      ("<b>" . dired-subtree-remove)
      ("S-TAB" . dired-subtree-remove))
    :config
    (setq dired-subtree-use-backgrounds nil))

  ;; multicursor and exapand selection
  (use-package multiple-cursors
    :ensure t
    :bind
    ("M-S-<up>" . 'mc/mark-previous-like-this)
    ("M-S-<down>" . 'mc/mark-next-like-this)
    ("M-m" . 'mc/edit-beginnings-of-lines)
    ("M-n" . 'mc/mark-next-like-this-word)
    ("M-c" . 'mc/skip-to-next-like-this))

  (use-package expand-region
    :ensure t
    :bind ("C-=" . 'er/expand-region)
    ("C--" . 'er/contract-region))

  (use-package move-text
    :ensure t
    :bind
    ("M-<up>" . 'move-text-up)
    ("M-<down>" . 'move-text-down))

  (use-package yasnippet
    :ensure t
    :requires yasnippet-snippets
    :config
    (yas-global-mode))

  (use-package yasnippet-snippets
    :ensure t)

  (use-package gptel
    :ensure t
    :config
    (setq gptel-api-key ""))

  (use-package markdown-mode
    :ensure t)

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

  (use-package async
  :ensure t
  :init (dired-async-mode 1))

#+end_src

